# + Nombre de archivo: ingresos.py
# + Ubicaci√≥n de archivo: Sandy bot/sandybot/handlers/ingresos.py
# User-provided custom instructions
"""
Handler para la verificaci√≥n de ingresos.
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging
import os
import tempfile
import json
import re
import pandas as pd
from sandybot.utils import obtener_mensaje, normalizar_camara
from ..database import obtener_servicio, actualizar_tracking, crear_servicio
from ..config import config
import shutil
from .estado import UserState
from ..registrador import responder_registrando

logger = logging.getLogger(__name__)


async def manejar_ingresos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Maneja la verificaci√≥n de ingresos.

    :param update: Objeto de actualizaci√≥n de Telegram.
    :param context: Contexto del manejador.
    """
    try:
        mensaje = obtener_mensaje(update)
        if not mensaje:
            logger.warning("No se recibi√≥ un mensaje en manejar_ingresos.")
            return

        # L√≥gica para la verificaci√≥n de ingresos
        await responder_registrando(
            mensaje,
            mensaje.from_user.id,
            mensaje.text or "manejar_ingresos",
            "Verificaci√≥n de ingresos en desarrollo.",
            "ingresos",
        )
    except Exception as e:
        await responder_registrando(
            mensaje,
            mensaje.from_user.id if mensaje else update.effective_user.id,
            mensaje.text if mensaje else "manejar_ingresos",
            f"Error al verificar ingresos: {e}",
            "ingresos",
        )


async def verificar_camara(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Busca servicios por nombre de c√°mara y responde con las coincidencias."""
    mensaje = obtener_mensaje(update)
    if not mensaje or not mensaje.text:
        logger.warning("No se recibi√≥ un nombre de c√°mara en verificar_camara.")
        return

    nombre_camara = mensaje.text.strip()
    exacto = False
    if (
        (nombre_camara.startswith("'") and nombre_camara.endswith("'"))
        or (nombre_camara.startswith('"') and nombre_camara.endswith('"'))
    ):
        nombre_camara = nombre_camara[1:-1]
        exacto = True

    from ..database import buscar_servicios_por_camara

    servicios = buscar_servicios_por_camara(nombre_camara, exacto=exacto)

    if not servicios:
        await responder_registrando(
            mensaje,
            mensaje.from_user.id,
            nombre_camara,
            "No encontr√© servicios con esa c√°mara.",
            "ingresos",
        )
        return

    if len(servicios) == 1:
        s = servicios[0]
        await responder_registrando(
            mensaje,
            mensaje.from_user.id,
            nombre_camara,
            f"La c√°mara pertenece al servicio {s.id}: {s.nombre or 'Sin nombre'}",
            "ingresos",
        )
    else:
        listado = "\n".join(f"{s.id}: {s.nombre or 'Sin nombre'}" for s in servicios)
        await responder_registrando(
            mensaje,
            mensaje.from_user.id,
            nombre_camara,
            "La c√°mara figura en varios servicios:\n" + listado,
            "ingresos",
        )


async def opcion_por_nombre(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Configura la verificaci√≥n por nombre de c√°mara."""
    mensaje = obtener_mensaje(update)
    user_id = update.effective_user.id
    context.user_data["esperando_opcion"] = False
    context.user_data["opcion_ingresos"] = "nombre"
    await responder_registrando(
        mensaje,
        user_id,
        "ingresos_nombre",
        "Envi√° el nombre de la c√°mara que quer√©s verificar.",
        "ingresos",
    )


async def opcion_por_excel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Configura la verificaci√≥n a partir de un Excel con c√°maras."""
    mensaje = obtener_mensaje(update)
    user_id = update.effective_user.id
    context.user_data["esperando_opcion"] = False
    context.user_data["opcion_ingresos"] = "excel"
    context.user_data["esperando_archivo_excel"] = True
    await responder_registrando(
        mensaje,
        user_id,
        "ingresos_excel",
        "Adjunt√° el Excel con las c√°maras en la columna A.",
        "ingresos",
    )


async def iniciar_verificacion_ingresos(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    Inicia el proceso de verificaci√≥n de ingresos.

    :param update: Objeto de actualizaci√≥n de Telegram.
    :param context: Contexto del manejador.
    """
    try:
        mensaje = obtener_mensaje(update)
        if not mensaje:
            logger.warning("No se recibi√≥ un mensaje en iniciar_verificacion_ingresos.")
            return

        # El mensaje proviene de un callback, por lo que ``from_user`` apunta
        # al bot. Usamos ``update.effective_user`` para registrar el modo en el
        # usuario correcto.
        user_id = update.effective_user.id
        UserState.set_mode(user_id, "ingresos")
        context.user_data.clear()
        context.user_data["esperando_opcion"] = True

        keyboard = [
            [
                InlineKeyboardButton(
                    "Por nombre de c√°mara", callback_data="ingresos_nombre"
                ),
                InlineKeyboardButton("Con Excel", callback_data="ingresos_excel"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await responder_registrando(
            mensaje,
            user_id,
            "verificar_ingresos",
            "¬øC√≥mo quer√©s validar las c√°maras?",
            "ingresos",
            reply_markup=reply_markup,
        )
    except Exception as e:
        await responder_registrando(
            mensaje,
            user_id,
            "verificar_ingresos",
            f"Error al iniciar la verificaci√≥n de ingresos: {e}",
            "ingresos",
        )


async def procesar_ingresos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Procesa los ingresos enviados por el usuario.

    :param update: Objeto de actualizaci√≥n de Telegram.
    :param context: Contexto del manejador.
    """
    try:
        mensaje = obtener_mensaje(update)
        if not mensaje or not mensaje.document:
            logger.warning("No se recibi√≥ un documento en procesar_ingresos.")
            return

        user_id = mensaje.from_user.id
        id_servicio = context.user_data.get("id_servicio")
        if not id_servicio:
            await responder_registrando(
                mensaje,
                user_id,
                mensaje.caption or mensaje.document.file_name,
                "Primero indic√° el ID del servicio en un mensaje de texto.",
                "ingresos",
            )
            return

        documento = mensaje.document
        if not documento.file_name.endswith(".txt"):
            await responder_registrando(
                mensaje,
                user_id,
                documento.file_name,
                "Solo acepto archivos .txt para verificar ingresos.",
                "ingresos",
            )
            return

        archivo = await documento.get_file()
        with tempfile.NamedTemporaryFile(delete=False, suffix=".txt") as tmp:
            await archivo.download_to_drive(tmp.name)

        destino = config.DATA_DIR / f"ingresos_{id_servicio}_{documento.file_name}"
        shutil.move(tmp.name, destino)

        with open(destino, "r", encoding="utf-8") as f:
            camaras_archivo = [line.strip() for line in f if line.strip()]

        servicio = obtener_servicio(int(id_servicio))
        if not servicio:
            servicio = crear_servicio(id=int(id_servicio))
            await responder_registrando(
                mensaje,
                user_id,
                documento.file_name,
                f"Servicio {id_servicio} creado en la base de datos.",
                "ingresos",
            )

        camaras_servicio = servicio.camaras or []

        # Mapas normalizados para comparar sin acentos ni may√∫sculas
        map_archivo = {normalizar_camara(c): c for c in camaras_archivo}
        map_servicio = {normalizar_camara(c): c for c in camaras_servicio}

        set_archivo = set(map_archivo.keys())
        set_servicio = set(map_servicio.keys())

        # C√°lculo de coincidencias y diferencias ignorando may√∫sculas
        coinciden_keys = set_archivo & set_servicio
        faltan_keys = set_servicio - set_archivo
        adicionales_keys = set_archivo - set_servicio

        coinciden = sorted(map_servicio[k] for k in coinciden_keys)
        faltantes = sorted(map_servicio[k] for k in faltan_keys)
        adicionales = sorted(map_archivo[k] for k in adicionales_keys)

        # Detecci√≥n de accesos a otras botellas de la misma c√°mara
        otras_botellas = []
        for key in adicionales_keys:
            for serv_key in set_servicio:
                if key.startswith(serv_key) and re.search(r"bot\s*\d+", key, re.I):
                    match = re.search(r"bot\s*\d+", map_archivo[key], re.I)
                    if match:
                        otras_botellas.append(
                            f"{map_servicio[serv_key]} {match.group(0).title()}"
                        )
                        break

        # Remover de adicionales los elementos identificados como otras botellas
        adicionales = [a for a in adicionales if a not in otras_botellas]

        respuesta = ["üìã Resultado de la verificaci√≥n:"]
        if coinciden:
            respuesta.append("‚úÖ Coinciden: " + ", ".join(coinciden))
        if faltantes:
            respuesta.append("‚ùå Faltan en archivo: " + ", ".join(faltantes))
        if adicionales:
            respuesta.append("‚ö†Ô∏è No esperadas: " + ", ".join(adicionales))
        if otras_botellas:
            respuesta.append(
                "‚ÑπÔ∏è Tambi√©n se detectaron accesos a otras botellas: "
                + ", ".join(otras_botellas)
            )
        if len(respuesta) == 1:
            respuesta.append("No se detectaron c√°maras para comparar.")

        await responder_registrando(
            mensaje,
            user_id,
            documento.file_name,
            "\n".join(respuesta),
            "ingresos",
        )

        actualizar_tracking(
            int(id_servicio),
            trackings_txt=[str(destino)],
            tipo="complementario",
        )

        UserState.set_mode(user_id, "")
        context.user_data.pop("id_servicio", None)
    except Exception as e:
        await responder_registrando(
            mensaje,
            user_id if "user_id" in locals() else update.effective_user.id,
            "procesar_ingresos",
            f"Error al procesar ingresos: {e}",
            "ingresos",
        )


async def procesar_ingresos_excel(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """Procesa un Excel con un listado de c√°maras en la columna A."""
    try:
        mensaje = obtener_mensaje(update)
        if not mensaje or not mensaje.document:
            logger.warning("No se recibi√≥ un Excel en procesar_ingresos_excel.")
            return

        documento = mensaje.document
        if not documento.file_name.endswith(".xlsx"):
            await responder_registrando(
                mensaje,
                mensaje.from_user.id,
                documento.file_name,
                "Solo acepto archivos Excel (.xlsx).",
                "ingresos",
            )
            return

        archivo = await documento.get_file()
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            await archivo.download_to_drive(tmp.name)

        try:
            df = pd.read_excel(tmp.name, header=None)
            camaras = [str(c).strip() for c in df.iloc[:, 0].dropna()]
        except Exception as e:
            logger.error("Error leyendo Excel: %s", e)
            await responder_registrando(
                mensaje,
                mensaje.from_user.id,
                documento.file_name,
                "No pude leer el Excel. Verific√° el formato.",
                "ingresos",
            )
            os.remove(tmp.name)
            return

        os.remove(tmp.name)

        from ..database import buscar_servicios_por_camara

        lineas = []
        for cam in camaras:
            exacto = False
            texto = cam
            if (
                (texto.startswith("'") and texto.endswith("'"))
                or (texto.startswith('"') and texto.endswith('"'))
            ):
                texto = texto[1:-1]
                exacto = True
            servicios = buscar_servicios_por_camara(texto, exacto=exacto)
            if not servicios:
                lineas.append(f"{cam}: sin coincidencias")
            elif len(servicios) == 1:
                s = servicios[0]
                nombre = s.nombre or "Sin nombre"
                lineas.append(f"{cam}: {s.id} - {nombre}")
            else:
                ids = ", ".join(str(s.id) for s in servicios)
                lineas.append(f"{cam}: varios servicios ({ids})")

        respuesta = (
            "\n".join(lineas)
            if lineas
            else "No se encontraron c√°maras en la columna A."
        )

        await responder_registrando(
            mensaje,
            mensaje.from_user.id,
            documento.file_name,
            respuesta,
            "ingresos",
        )

        UserState.set_mode(mensaje.from_user.id, "")
        context.user_data.clear()
    except Exception as e:
        await responder_registrando(
            mensaje,
            mensaje.from_user.id if mensaje else update.effective_user.id,
            "procesar_ingresos_excel",
            f"Error al procesar el Excel: {e}",
            "ingresos",
        )
